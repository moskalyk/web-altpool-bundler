{"version":3,"file":"Sig.js","sourceRoot":"","sources":["../../../src/internal/builtins/Sig.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,iDAAwG;AAEjG,IAAM,eAAe,GAAG,UAAC,MAAiB;IAC7C,OAAO,IAAA,mBAAG,EACN,IAAA,6CAA6B,EAAC,MAAM,CAAC,EACrC,IAAA,kBAAE,EACE,IAAA,8BAAc,EAAC,aAAa,EAAE,iBAAiB,CAAC,EAChD,IAAA,8BAAc,EAAC,aAAa,EAAE,sBAAsB,CAAC,EACrD,IAAA,8BAAc,EAAC,UAAU,EAAE,eAAe,CAAC,EAC3C,IAAA,8BAAc,EAAC,UAAU,EAAE,kBAAkB,CAAC,EAC9C,IAAA,8BAAc,EAAC,UAAU,EAAE,2BAA2B,CAAC,EACvD,IAAA,8BAAc,EAAC,UAAU,EAAE,qBAAqB,CAAC,CACpD,CACJ,CAAC;AACN,CAAC,CAAC;AAZW,QAAA,eAAe,mBAY1B;AAEF;IAGI,aAAY,OAAgB;QAI5B;;WAEG;QACH,kBAAa,GAA0B,UAAC,MAAM;YAC1C,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC;QARE,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IASD;;OAEG;IACH,yBAAW,GAAX;QACI,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;IACrC,CAAC;IAED;;OAEG;IACG,kBAAI,GAAV,UACI,IAAc,EACd,UAA8B;;;;;;wBAE9B,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE;4BACjC,sBAAO;oCACH,OAAO,EAAE,KAAK;oCACd,KAAK,EAAE,kCAAkC;oCACzC,SAAS,EAAE,IAAI;iCAClB,EAAC;yBACL;wBAEkB,qBAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAA;;wBAAjE,UAAU,GAAG,SAAoD;wBAEvE,sBAAO;gCACH,OAAO,EAAE,IAAI;gCACb,KAAK,EAAE,IAAI;gCACX,SAAS,EAAE,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC;6BACpC,EAAC;;;;KACL;IAED;;OAEG;IACH,oBAAM,GAAN,UAAO,SAAmB,EAAE,IAAc;QACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACnF,CAAC;IACL,UAAC;AAAD,CAAC,AAnDD,IAmDC;AAnDY,kBAAG","sourcesContent":["import { CallParams, PeerIdB58 } from '../commonTypes';\nimport { KeyPair } from '@fluencelabs/keypair';\nimport { SigDef } from '../_aqua/services';\nimport { allowOnlyParticleOriginatedAt, allowServiceFn, and, or, SecurityGuard } from './securityGuard';\n\nexport const defaultSigGuard = (peerId: PeerIdB58) => {\n    return and<'data'>(\n        allowOnlyParticleOriginatedAt(peerId),\n        or(\n            allowServiceFn('trust-graph', 'get_trust_bytes'),\n            allowServiceFn('trust-graph', 'get_revocation_bytes'),\n            allowServiceFn('registry', 'get_key_bytes'),\n            allowServiceFn('registry', 'get_record_bytes'),\n            allowServiceFn('registry', 'get_record_metadata_bytes'),\n            allowServiceFn('registry', 'get_tombstone_bytes'),\n        ),\n    );\n};\n\nexport class Sig implements SigDef {\n    private _keyPair: KeyPair;\n\n    constructor(keyPair: KeyPair) {\n        this._keyPair = keyPair;\n    }\n\n    /**\n     * Configurable security guard for sign method\n     */\n    securityGuard: SecurityGuard<'data'> = (params) => {\n        return true;\n    };\n\n    /**\n     * Gets the public key of KeyPair. Required by aqua\n     */\n    get_peer_id() {\n        return this._keyPair.getPeerId();\n    }\n\n    /**\n     * Signs the data using key pair's private key. Required by aqua\n     */\n    async sign(\n        data: number[],\n        callParams: CallParams<'data'>,\n    ): Promise<{ error: string | null; signature: number[] | null; success: boolean }> {\n        if (!this.securityGuard(callParams)) {\n            return {\n                success: false,\n                error: 'Security guard validation failed',\n                signature: null,\n            };\n        }\n\n        const signedData = await this._keyPair.signBytes(Uint8Array.from(data));\n\n        return {\n            success: true,\n            error: null,\n            signature: Array.from(signedData),\n        };\n    }\n\n    /**\n     * Verifies the signature. Required by aqua\n     */\n    verify(signature: number[], data: number[]): Promise<boolean> {\n        return this._keyPair.verify(Uint8Array.from(data), Uint8Array.from(signature));\n    }\n}\n"]}