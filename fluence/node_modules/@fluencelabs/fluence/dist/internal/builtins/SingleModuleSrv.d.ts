import { SrvDef } from '../_aqua/single-module-srv';
import { NodeUtilsDef } from '../_aqua/node-utils';
import { FluencePeer } from '../FluencePeer';
import { CallParams } from '../commonTypes';
import { SecurityGuard } from './securityGuard';
export declare const defaultGuard: (peer: FluencePeer) => SecurityGuard<any>;
export declare class Srv implements SrvDef {
    private peer;
    private services;
    constructor(peer: FluencePeer);
    securityGuard_create: SecurityGuard<'wasm_b64_content'>;
    create(wasm_b64_content: string, callParams: CallParams<'wasm_b64_content'>): Promise<{
        success: boolean;
        service_id: string;
        error: null;
    } | {
        success: boolean;
        service_id: null;
        error: any;
    }>;
    securityGuard_remove: SecurityGuard<'service_id'>;
    remove(service_id: string, callParams: CallParams<'service_id'>): {
        success: boolean;
        error: string;
        service_id: null;
    } | {
        success: boolean;
        error: string;
        service_id?: undefined;
    } | {
        success: boolean;
        error: null;
        service_id?: undefined;
    };
    list(): string[];
}
export declare class NodeUtils implements NodeUtilsDef {
    private peer;
    constructor(peer: FluencePeer);
    securityGuard_readFile: SecurityGuard<'path'>;
    read_file(path: string, callParams: CallParams<'path'>): Promise<{
        success: boolean;
        content: any;
        error: null;
    } | {
        success: boolean;
        error: any;
        content: null;
    }>;
}
//# sourceMappingURL=SingleModuleSrv.d.ts.map