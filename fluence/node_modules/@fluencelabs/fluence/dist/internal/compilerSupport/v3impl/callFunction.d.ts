import { FnConfig, FunctionCallDef } from './interface';
import { FluencePeer } from '../../FluencePeer';
/**
 * Convenience function to support Aqua `func` generation backend
 * The compiler only need to generate a call the function and provide the corresponding definitions and the air script
 *
 * @param rawFnArgs - raw arguments passed by user to the generated function
 * @param def - function definition generated by the Aqua compiler
 * @param script - air script with function execution logic generated by the Aqua compiler
 */
export declare function callFunction(rawFnArgs: Array<any>, def: FunctionCallDef, script: string): Promise<unknown>;
/**
 * Convenience function which does all the internal work of creating particles
 * and making necessary service registrations in order to support Aqua function calls
 *
 * @param def - function definition generated by the Aqua compiler
 * @param script - air script with function execution logic generated by the Aqua compiler
 * @param config - options to configure Aqua function execution
 * @param peer - Fluence Peer to invoke the function at
 * @param args - args in the form of JSON where each key corresponds to the name of the argument
 * @returns
 */
export declare function callFunctionImpl(def: FunctionCallDef, script: string, config: FnConfig, peer: FluencePeer, args: {
    [key: string]: any;
}): Promise<unknown>;
//# sourceMappingURL=callFunction.d.ts.map