"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.list_services = exports.service_removed = exports.file_not_found = exports.removing_non_exiting = exports.happy_path = void 0;
var v4_1 = require("../../internal/compilerSupport/v4");
function happy_path() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var script = "\n                    (xor\n                     (seq\n                      (seq\n                       (seq\n                        (seq\n                         (seq\n                          (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                          (call %init_peer_id% (\"getDataSrv\" \"file_path\") [] file_path)\n                         )\n                         (call %init_peer_id% (\"node_utils\" \"read_file\") [file_path] file)\n                        )\n                        (call %init_peer_id% (\"single_module_srv\" \"create\") [file.$.content.[0]!] created_service)\n                       )\n                       (call %init_peer_id% (created_service.$.service_id.[0]! \"greeting\") [\"test\"] greeting)\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [greeting])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    ";
    return (0, v4_1.callFunction$$)(args, {
        functionName: 'happy_path',
        arrow: {
            tag: 'arrow',
            domain: {
                tag: 'labeledProduct',
                fields: {
                    file_path: {
                        tag: 'scalar',
                        name: 'string',
                    },
                },
            },
            codomain: {
                tag: 'unlabeledProduct',
                items: [
                    {
                        tag: 'scalar',
                        name: 'string',
                    },
                ],
            },
        },
        names: {
            relay: '-relay-',
            getDataSrv: 'getDataSrv',
            callbackSrv: 'callbackSrv',
            responseSrv: 'callbackSrv',
            responseFnName: 'response',
            errorHandlingSrv: 'errorHandlingSrv',
            errorFnName: 'error',
        },
    }, script);
}
exports.happy_path = happy_path;
function removing_non_exiting() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var script = "\n                    (xor\n                     (seq\n                      (seq\n                       (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                       (call %init_peer_id% (\"single_module_srv\" \"remove\") [\"random_id\"] e)\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [e.$.error.[0]!])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    ";
    return (0, v4_1.callFunction$$)(args, {
        functionName: 'removing_non_exiting',
        arrow: {
            tag: 'arrow',
            domain: {
                tag: 'labeledProduct',
                fields: {},
            },
            codomain: {
                tag: 'unlabeledProduct',
                items: [
                    {
                        tag: 'scalar',
                        name: 'string',
                    },
                ],
            },
        },
        names: {
            relay: '-relay-',
            getDataSrv: 'getDataSrv',
            callbackSrv: 'callbackSrv',
            responseSrv: 'callbackSrv',
            responseFnName: 'response',
            errorHandlingSrv: 'errorHandlingSrv',
            errorFnName: 'error',
        },
    }, script);
}
exports.removing_non_exiting = removing_non_exiting;
function file_not_found() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var script = "\n                    (xor\n                     (seq\n                      (seq\n                       (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                       (call %init_peer_id% (\"node_utils\" \"read_file\") [\"/random/incorrect/file\"] e)\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [e.$.error.[0]!])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    ";
    return (0, v4_1.callFunction$$)(args, {
        functionName: 'file_not_found',
        arrow: {
            tag: 'arrow',
            domain: {
                tag: 'labeledProduct',
                fields: {},
            },
            codomain: {
                tag: 'unlabeledProduct',
                items: [
                    {
                        tag: 'scalar',
                        name: 'string',
                    },
                ],
            },
        },
        names: {
            relay: '-relay-',
            getDataSrv: 'getDataSrv',
            callbackSrv: 'callbackSrv',
            responseSrv: 'callbackSrv',
            responseFnName: 'response',
            errorHandlingSrv: 'errorHandlingSrv',
            errorFnName: 'error',
        },
    }, script);
}
exports.file_not_found = file_not_found;
function service_removed() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var script = "\n                    (xor\n                     (seq\n                      (seq\n                       (seq\n                        (seq\n                         (seq\n                          (seq\n                           (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                           (call %init_peer_id% (\"getDataSrv\" \"file_path\") [] file_path)\n                          )\n                          (call %init_peer_id% (\"node_utils\" \"read_file\") [file_path] file)\n                         )\n                         (call %init_peer_id% (\"single_module_srv\" \"create\") [file.$.content.[0]!] created_service)\n                        )\n                        (call %init_peer_id% (\"single_module_srv\" \"remove\") [created_service.$.service_id.[0]!])\n                       )\n                       (xor\n                        (call %init_peer_id% (created_service.$.service_id.[0]! \"greeting\") [\"test\"] dontcare)\n                        (null)\n                       )\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [%last_error%.$.message!])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    ";
    return (0, v4_1.callFunction$$)(args, {
        functionName: 'service_removed',
        arrow: {
            tag: 'arrow',
            domain: {
                tag: 'labeledProduct',
                fields: {
                    file_path: {
                        tag: 'scalar',
                        name: 'string',
                    },
                },
            },
            codomain: {
                tag: 'unlabeledProduct',
                items: [
                    {
                        tag: 'scalar',
                        name: 'string',
                    },
                ],
            },
        },
        names: {
            relay: '-relay-',
            getDataSrv: 'getDataSrv',
            callbackSrv: 'callbackSrv',
            responseSrv: 'callbackSrv',
            responseFnName: 'response',
            errorHandlingSrv: 'errorHandlingSrv',
            errorFnName: 'error',
        },
    }, script);
}
exports.service_removed = service_removed;
function list_services() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var script = "\n                    (xor\n                     (seq\n                      (seq\n                       (seq\n                        (seq\n                         (seq\n                          (seq\n                           (seq\n                            (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                            (call %init_peer_id% (\"getDataSrv\" \"file_path\") [] file_path)\n                           )\n                           (call %init_peer_id% (\"node_utils\" \"read_file\") [file_path] file)\n                          )\n                          (call %init_peer_id% (\"single_module_srv\" \"create\") [file.$.content.[0]!])\n                         )\n                         (call %init_peer_id% (\"single_module_srv\" \"create\") [file.$.content.[0]!])\n                        )\n                        (call %init_peer_id% (\"single_module_srv\" \"create\") [file.$.content.[0]!])\n                       )\n                       (call %init_peer_id% (\"single_module_srv\" \"list\") [] list)\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [list])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    ";
    return (0, v4_1.callFunction$$)(args, {
        functionName: 'list_services',
        arrow: {
            tag: 'arrow',
            domain: {
                tag: 'labeledProduct',
                fields: {
                    file_path: {
                        tag: 'scalar',
                        name: 'string',
                    },
                },
            },
            codomain: {
                tag: 'unlabeledProduct',
                items: [
                    {
                        tag: 'array',
                        type: {
                            tag: 'scalar',
                            name: 'string',
                        },
                    },
                ],
            },
        },
        names: {
            relay: '-relay-',
            getDataSrv: 'getDataSrv',
            callbackSrv: 'callbackSrv',
            responseSrv: 'callbackSrv',
            responseFnName: 'response',
            errorHandlingSrv: 'errorHandlingSrv',
            errorFnName: 'error',
        },
    }, script);
}
exports.list_services = list_services;
//# sourceMappingURL=srv-tests.js.map