{"version":3,"file":"srv-tests.js","sourceRoot":"","sources":["../../../src/__test__/_aqua/srv-tests.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n *\n * This file is auto-generated. Do not edit manually: changes may be erased.\n * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.\n * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues\n * Aqua version: 0.7.7-362\n *\n */\nimport { FluencePeer } from '../../index';\nimport { callFunction$$ } from '../../internal/compilerSupport/v4';\n\n// Services\n\n// Functions\n\nexport function happy_path(file_path: string, config?: { ttl?: number }): Promise<string>;\n\nexport function happy_path(peer: FluencePeer, file_path: string, config?: { ttl?: number }): Promise<string>;\n\nexport function happy_path(...args: any) {\n    let script = `\n                    (xor\n                     (seq\n                      (seq\n                       (seq\n                        (seq\n                         (seq\n                          (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                          (call %init_peer_id% (\"getDataSrv\" \"file_path\") [] file_path)\n                         )\n                         (call %init_peer_id% (\"node_utils\" \"read_file\") [file_path] file)\n                        )\n                        (call %init_peer_id% (\"single_module_srv\" \"create\") [file.$.content.[0]!] created_service)\n                       )\n                       (call %init_peer_id% (created_service.$.service_id.[0]! \"greeting\") [\"test\"] greeting)\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [greeting])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    `;\n    return callFunction$$(\n        args,\n        {\n            functionName: 'happy_path',\n            arrow: {\n                tag: 'arrow',\n                domain: {\n                    tag: 'labeledProduct',\n                    fields: {\n                        file_path: {\n                            tag: 'scalar',\n                            name: 'string',\n                        },\n                    },\n                },\n                codomain: {\n                    tag: 'unlabeledProduct',\n                    items: [\n                        {\n                            tag: 'scalar',\n                            name: 'string',\n                        },\n                    ],\n                },\n            },\n            names: {\n                relay: '-relay-',\n                getDataSrv: 'getDataSrv',\n                callbackSrv: 'callbackSrv',\n                responseSrv: 'callbackSrv',\n                responseFnName: 'response',\n                errorHandlingSrv: 'errorHandlingSrv',\n                errorFnName: 'error',\n            },\n        },\n        script,\n    );\n}\n\nexport function removing_non_exiting(config?: { ttl?: number }): Promise<string>;\n\nexport function removing_non_exiting(peer: FluencePeer, config?: { ttl?: number }): Promise<string>;\n\nexport function removing_non_exiting(...args: any) {\n    let script = `\n                    (xor\n                     (seq\n                      (seq\n                       (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                       (call %init_peer_id% (\"single_module_srv\" \"remove\") [\"random_id\"] e)\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [e.$.error.[0]!])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    `;\n    return callFunction$$(\n        args,\n        {\n            functionName: 'removing_non_exiting',\n            arrow: {\n                tag: 'arrow',\n                domain: {\n                    tag: 'labeledProduct',\n                    fields: {},\n                },\n                codomain: {\n                    tag: 'unlabeledProduct',\n                    items: [\n                        {\n                            tag: 'scalar',\n                            name: 'string',\n                        },\n                    ],\n                },\n            },\n            names: {\n                relay: '-relay-',\n                getDataSrv: 'getDataSrv',\n                callbackSrv: 'callbackSrv',\n                responseSrv: 'callbackSrv',\n                responseFnName: 'response',\n                errorHandlingSrv: 'errorHandlingSrv',\n                errorFnName: 'error',\n            },\n        },\n        script,\n    );\n}\n\nexport function file_not_found(config?: { ttl?: number }): Promise<string>;\n\nexport function file_not_found(peer: FluencePeer, config?: { ttl?: number }): Promise<string>;\n\nexport function file_not_found(...args: any) {\n    let script = `\n                    (xor\n                     (seq\n                      (seq\n                       (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                       (call %init_peer_id% (\"node_utils\" \"read_file\") [\"/random/incorrect/file\"] e)\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [e.$.error.[0]!])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    `;\n    return callFunction$$(\n        args,\n        {\n            functionName: 'file_not_found',\n            arrow: {\n                tag: 'arrow',\n                domain: {\n                    tag: 'labeledProduct',\n                    fields: {},\n                },\n                codomain: {\n                    tag: 'unlabeledProduct',\n                    items: [\n                        {\n                            tag: 'scalar',\n                            name: 'string',\n                        },\n                    ],\n                },\n            },\n            names: {\n                relay: '-relay-',\n                getDataSrv: 'getDataSrv',\n                callbackSrv: 'callbackSrv',\n                responseSrv: 'callbackSrv',\n                responseFnName: 'response',\n                errorHandlingSrv: 'errorHandlingSrv',\n                errorFnName: 'error',\n            },\n        },\n        script,\n    );\n}\n\nexport function service_removed(file_path: string, config?: { ttl?: number }): Promise<string>;\n\nexport function service_removed(peer: FluencePeer, file_path: string, config?: { ttl?: number }): Promise<string>;\n\nexport function service_removed(...args: any) {\n    let script = `\n                    (xor\n                     (seq\n                      (seq\n                       (seq\n                        (seq\n                         (seq\n                          (seq\n                           (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                           (call %init_peer_id% (\"getDataSrv\" \"file_path\") [] file_path)\n                          )\n                          (call %init_peer_id% (\"node_utils\" \"read_file\") [file_path] file)\n                         )\n                         (call %init_peer_id% (\"single_module_srv\" \"create\") [file.$.content.[0]!] created_service)\n                        )\n                        (call %init_peer_id% (\"single_module_srv\" \"remove\") [created_service.$.service_id.[0]!])\n                       )\n                       (xor\n                        (call %init_peer_id% (created_service.$.service_id.[0]! \"greeting\") [\"test\"] dontcare)\n                        (null)\n                       )\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [%last_error%.$.message!])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    `;\n    return callFunction$$(\n        args,\n        {\n            functionName: 'service_removed',\n            arrow: {\n                tag: 'arrow',\n                domain: {\n                    tag: 'labeledProduct',\n                    fields: {\n                        file_path: {\n                            tag: 'scalar',\n                            name: 'string',\n                        },\n                    },\n                },\n                codomain: {\n                    tag: 'unlabeledProduct',\n                    items: [\n                        {\n                            tag: 'scalar',\n                            name: 'string',\n                        },\n                    ],\n                },\n            },\n            names: {\n                relay: '-relay-',\n                getDataSrv: 'getDataSrv',\n                callbackSrv: 'callbackSrv',\n                responseSrv: 'callbackSrv',\n                responseFnName: 'response',\n                errorHandlingSrv: 'errorHandlingSrv',\n                errorFnName: 'error',\n            },\n        },\n        script,\n    );\n}\n\nexport function list_services(file_path: string, config?: { ttl?: number }): Promise<string[]>;\n\nexport function list_services(peer: FluencePeer, file_path: string, config?: { ttl?: number }): Promise<string[]>;\n\nexport function list_services(...args: any) {\n    let script = `\n                    (xor\n                     (seq\n                      (seq\n                       (seq\n                        (seq\n                         (seq\n                          (seq\n                           (seq\n                            (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                            (call %init_peer_id% (\"getDataSrv\" \"file_path\") [] file_path)\n                           )\n                           (call %init_peer_id% (\"node_utils\" \"read_file\") [file_path] file)\n                          )\n                          (call %init_peer_id% (\"single_module_srv\" \"create\") [file.$.content.[0]!])\n                         )\n                         (call %init_peer_id% (\"single_module_srv\" \"create\") [file.$.content.[0]!])\n                        )\n                        (call %init_peer_id% (\"single_module_srv\" \"create\") [file.$.content.[0]!])\n                       )\n                       (call %init_peer_id% (\"single_module_srv\" \"list\") [] list)\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [list])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    `;\n    return callFunction$$(\n        args,\n        {\n            functionName: 'list_services',\n            arrow: {\n                tag: 'arrow',\n                domain: {\n                    tag: 'labeledProduct',\n                    fields: {\n                        file_path: {\n                            tag: 'scalar',\n                            name: 'string',\n                        },\n                    },\n                },\n                codomain: {\n                    tag: 'unlabeledProduct',\n                    items: [\n                        {\n                            tag: 'array',\n                            type: {\n                                tag: 'scalar',\n                                name: 'string',\n                            },\n                        },\n                    ],\n                },\n            },\n            names: {\n                relay: '-relay-',\n                getDataSrv: 'getDataSrv',\n                callbackSrv: 'callbackSrv',\n                responseSrv: 'callbackSrv',\n                responseFnName: 'response',\n                errorHandlingSrv: 'errorHandlingSrv',\n                errorFnName: 'error',\n            },\n        },\n        script,\n    );\n}\n"]}