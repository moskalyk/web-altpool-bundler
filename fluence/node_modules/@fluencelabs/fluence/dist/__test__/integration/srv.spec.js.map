{"version":3,"file":"srv.spec.js","sourceRoot":"","sources":["../../../src/__test__/integration/srv.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAyE;AAGzE,8CAAwB;AACxB,gDAAsH;AAEtH,IAAI,IAAiB,CAAC;AAEtB,QAAQ,CAAC,wBAAwB,EAAE;IAC/B,SAAS,CAAC;;;;yBACF,IAAI,EAAJ,wBAAI;oBACJ,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;oBAAjB,SAAiB,CAAC;;;;;SAEzB,CAAC,CAAC;IAEH,UAAU,CAAC;;;;oBACP,IAAI,GAAG,IAAI,mBAAW,EAAE,CAAC;oBACzB,qBAAM,IAAI,CAAC,KAAK,EAAE,EAAA;;oBAAlB,SAAkB,CAAC;;;;SACtB,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE;;;;;oBAEjC,IAAI,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;oBAGzC,qBAAM,IAAA,sBAAU,EAAC,IAAI,EAAE,IAAI,CAAC,EAAA;;oBAAlC,GAAG,GAAG,SAA4B;oBAExC,SAAS;oBACT,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;;;SAChC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE;;;;;oBAEnB,IAAI,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;oBAGzC,qBAAM,IAAA,yBAAa,EAAC,IAAI,EAAE,IAAI,CAAC,EAAA;;oBAArC,GAAG,GAAG,SAA+B;oBAE3C,SAAS;oBACT,MAAM,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;;;;SAC/B,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE;;;;;oBAE/B,IAAI,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;oBAGzC,qBAAM,IAAA,2BAAe,EAAC,IAAI,EAAE,IAAI,CAAC,EAAA;;oBAAvC,GAAG,GAAG,SAAiC;oBAE7C,SAAS;oBACT,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,8CAA8C,CAAC,CAAC;;;;SACvE,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;;;;wBAIvB,qBAAM,IAAA,0BAAc,EAAC,IAAI,CAAC,EAAA;;oBAAhC,GAAG,GAAG,SAA0B;oBAEtC,SAAS;oBACT,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,kEAAkE,CAAC,CAAC;;;;SAC3F,CAAC,CAAC;IAEH,EAAE,CAAC,GAAG,EAAE;;;;wBAIQ,qBAAM,IAAA,gCAAoB,EAAC,IAAI,CAAC,EAAA;;oBAAtC,GAAG,GAAG,SAAgC;oBAE5C,SAAS;oBACT,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,qCAAqC,CAAC,CAAC;;;;SAC9D,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { Fluence, FluencePeer, KeyPair, setLogLevel } from '../../index';\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { happy_path, service_removed, file_not_found, list_services, removing_non_exiting } from '../_aqua/srv-tests';\n\nlet peer: FluencePeer;\n\ndescribe('Srv service test suite', () => {\n    afterEach(async () => {\n        if (peer) {\n            await peer.stop();\n        }\n    });\n\n    beforeEach(async () => {\n        peer = new FluencePeer();\n        await peer.start();\n    });\n\n    it('Use custom srv service, success path', async () => {\n        // arrange\n        const wasm = path.join(__dirname, './greeting.wasm');\n\n        // act\n        const res = await happy_path(peer, wasm);\n\n        // assert\n        expect(res).toBe('Hi, test');\n    });\n\n    it('List deployed services', async () => {\n        // arrange\n        const wasm = path.join(__dirname, './greeting.wasm');\n\n        // act\n        const res = await list_services(peer, wasm);\n\n        // assert\n        expect(res).toHaveLength(3);\n    });\n\n    it('Correct error for removed services', async () => {\n        // arrange\n        const wasm = path.join(__dirname, './greeting.wasm');\n\n        // act\n        const res = await service_removed(peer, wasm);\n\n        // assert\n        expect(res).toMatch('No handler has been registered for serviceId');\n    });\n\n    it('Correct error for file not found', async () => {\n        // arrange\n\n        // act\n        const res = await file_not_found(peer);\n\n        // assert\n        expect(res).toMatch(\"ENOENT: no such file or directory, open '/random/incorrect/file'\");\n    });\n\n    it('4', async () => {\n        // arrange\n\n        // act\n        const res = await removing_non_exiting(peer);\n\n        // assert\n        expect(res).toMatch('Service with id random_id not found');\n    });\n});\n"]}